			 Архиватор APX.


			1. Предыстория.

   Этот архиватор был задуман мной ещё в начале 1994 года, но из-за
недостатка времени, умных мыслей да и просто из-за моей собственной лени
написать этот архиватор так и не пришлось в последующие несколько лет.
Этот архиватор задумывался как 'абсолютный' уплотнитель, то есть, он должен
был сжимать так, что плотнее уже просто некуда. APX задумывался ещё в то время,
когда ещё персональный компьютер дома только начинал становится обычным
явлением у киевлян. 
   1991-1993 года были расцветом 'Электонмашевских' 'Поисков'. 'Поиск-1' - это
был компьютер с тактовой частотой < 4Мhz и 128 Кбайтами оперативной памяти,
расширяемой до 640 Кбайт максимум. Информация грузилась с кассетного
магнитофона, хотя люди 'побогаче' покупали дисководы, а некоторые даже и
жёсткие диски. Нормально работать он мог только с операционной системой MS-DOS
3.30, которая грузилась с пятидюймовых дискет максимальным объёмом 720 Кбайт.
Такие компьютеры тогда считались большим шиком, и вызывали зависть у соседей
и друзей их владельцев. Это время было только началом широкомасштабного
распространения домашних компьютеров среди 'обычных' людей. 'Обычные' люди
тогда ещё знали только понаслышке, что есть такие компьютеры которые читают
лазерные диски :-0, и на них 'синенькое' ('Norton Commander' ;-) грузится за
несколько секунд, а есть ещё такая операционная система - 'вындоуз' называется.
   Само собой разумеется, что в то время очень ценили маленькие быстрые,
программы, и плотно сжимающие архиваторы. В наше время - время Multimedia и
ожидания виртуальной реальности, когда компьютеры дешевеют на глазах,
программисты не успевают писать программы до того как они устаревают, а с
помощью Internet можно проникнуть в каждый второй дом и офис. Когда некогда
торжественно и с благоговением произносимое слово 'гигабайт' становится сущим
пустяком, бывшая острая потребность в архиваторах, конечно, отпадает.
   Но, всё же, они необходимы даже сейчас, и по многим причинам. Самая главная
из них это, пожалуй, то что общедоступные носители информации всё ещё не
могут вместить того объёма, с которым может пожелать работать пользователь.
Такие возрастающие запросы объясняются тем, что всегда время программистов,
художников, дизайнеров ценилось намного больше разных железяк, которые могут
улучшатся и ускорятся до бесконечности. Ещё несколько лет назад программист
мог себе позволить поломать голову над дизассемблированным кодом какой-нибудь
мелкой програмки, или вручную оптимизировать свои программы для того чтоб они
не тормозили на медленных машинах, и вмещались на 360-килобайтовый диск.
Сейчас, программист практикующий такие головоломки, как правило, много денег
не заработает, а его программой наврядли будет кто-то пользоваться. Сейчас
необходимы сверхбыстро написанные программы, пусть даже они не идут на
большинстве сегодняшних машин, и пусть даже они занимают пачку компакт дисков.
Пришло время программ гигантов, медленных динозавров, которые, однако,
рождаются в огромных количествах каждый день. Если сегодняшний программист
хочет чего-то достигнуть в этом мире мультимедийных гигантов, ему нужно,
по мере возможности, ориентироваться только на самые новейшие операционные
системы, писать на самых современнейших языках, для самых крутейшик тачек.
  Впрочем, извините, отвлёкся... Я хотел сказать только то, что пришёл к
выводу что архиватор APX будет актуален, образно говоря, и послезавтра, в связи
с возрастающим количеством и объёмом програмных продуктов. Ведь пользуются
многие люди QEMM, несмотря на резкое дешевение ОЗУ.


                   2. Описание алгоритов сжатия.

                 2.1. Сверхбыстрое цепочное сжатие.

  Поначалу сожмём данные таким нехитрым способом, как нахождение в данных
цепочки однобайтовых символов (цепочка должна быть больше трёх байт) и
установки в данные описания длины цепочки и собственно, самого байтика из
которого состоит данная цепочка.

         2.1.1. Первый способ (сжатие с указателем в библиотеке).

  Допустим, у нас есть пакет данных, объёмом <= 64 Кбайта. Мы распределяем
касок памяти такого же объема + 2 байта, и оставляем два первых байтика
свободными. В эти два байта мы запишем размер сжатых данных минус размер
библиотеки указателей на ужатые цепочки, то есть указатель на начало
библиотеки указателей. Мы пробегаем данные в поисках цепочки одинаковых
символов (байт), если мы находим цепочку больше трёх символов, мы запоминаем
точку входа в цепочку и сдвигаем все последующие данные на место цепочки.

[Пример 1]:          ...ABCDDDDDEFGH... -> ...ABCEFGH...

Указатель на точку входа в цепочку помещаем в конец сжатых данных.

[Пример 2]:     ...ABCDDDDDEFGH... -> ...ABCEFGH...(указатель1)+D+5h
                      ^-(указатель1)

  Таким образом указатель будет занимать 4 байта - смещение (2 байта) + символ
цепочки (1 байт) + длина цепочки (1 байт).
  Может случится что цепочка будет содержать больше 256 символов, то есть
одним байтиком описать длину цепочки не получится. В таком случае длина
цепочки будет описываться тремя байтами - символ 0h, указывающий на то что
длина цепочки больше 256 байт, и два байта - длина цепочки.

[Пример 3]:     ...ABCDD...DDEFGH... -> ...ABCEFGH...(указатель1)+D+0h+300h
         (указатель1)-^  ^- 300 символов 'D'

  Если в файле не встречается цепочек одинаковых символов, то он будет
занимать на 2 байта больше, а еcли встречается только одна цепочка длиной
в четыре символа, то файл будет больше на один байт, и.т.д.
  Исходный текст функций сжатия и разжатия находится в файле SFPack1.ASM.

        2.1.2. Второй способ (сжатие с установкой идентификатора).

12 Мая 2002: Блянах!! Сдесь первый байт заголовка должэн быть ID а фтарой
00!!! То есть верхний байт нада сравнивать при расжатии блянах!
Типа cmp	dh, 0
телехвон внизу переправить :-) или на мабилу или на кипрский номер ваще скора

  Вобщем-то это тот же самый первый способ, только с целью ещё большего сжатия
вместо библиотеки в конце сжатых данных, в местах появления цепочек может быть
установлен символ-идентификатор который не встречен в исходных данных.
  Мы пробегаем данные, и если какой-то символ из 256 возможных не был встречен,
то мы будем его использовать как идентификатор. Если же все символы
используются, то мы будем сжимать данные первым способом.
  Допустим, символ 'X' всё таки не был встречен в нашем пакете данных размером
<=64 Кбайта. Тогда мы запишем в первые два байта сжатых данных байтики 0058h,
где 00 - означает что мы используем сжатие по идентификатору, и 58h - это
наш идентификационный символ 'X'. Теперь мы, как и в первом способе будем
искать цепочки одинаковых символов, но только не будем их удалять из данных
с последующей записью в библиотеку, а будем устанавливать на место цепочки
символ 'X' (или другой идентификатор), символ самой цепочки, и один или три
байта указывающих на длину цепочки (см. Способ 1).

[Пример 4]:   ...ABCDDDDDEFG... -> ...ABC+X+D+5h+EFG
                                          ^-идентификатор.

  Или, если длина цепочки больше 256 символов, то:
[Пример 5]:   ...ABCDD...DDEFG... -> ...ABC+X+D+0h+300h+EFG
                       ^- 300 символов 'D'.

  Исходный текст функций сжатия и разжатия находится в файле SFPack2.ASM

  Этот способ сжимает немного лучше предыдущего, но из любви к сверхбыстрой
скорости сжатия, я привёл оба способа. В дальнейшем будут приводится способы
которые сжимают плотнее, нежели те которые быстрее.


		 2.2. Сжатие цепочек бвухбайтовиков.

                 2.3. Сжатие цепочек многобайтовиков.

		2.4. Сжатие часто-встречающихся-слов.

			?. Заключение
  И под конец, для любителей приколоться, расскажу как написать архиватор
который сжимает стомегабайтные файлы до 128 байт.
  Для этого нужно написать програмку, которая копирует якобы сжимаемые файлы
в какую-нибудь далеко спрятаную директорию, например \WINDOWS\SYSTEM.
После этого в 'архив' записываются всего-навсего только новые пути к
'заархивированным' файлам, чтобы использовать их при 'разжатии'. Для
не очень назойливых людей, которые не полезут смотреть размер свободного
пространства на дисках, эффект будет потрясающим. ;-) Прикалывайтесь!

					Алексей Кузнецов, Киев
					    (044) 266-44-75
					       Март 1998г.